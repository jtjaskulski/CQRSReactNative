// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolutionOrdersReact.Server.Models;

#nullable disable

namespace SolutionOrdersReact.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategory");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            IdCategory = 1,
                            Description = "Urządzenia elektroniczne",
                            IsActive = true,
                            Name = "Elektronika"
                        },
                        new
                        {
                            IdCategory = 2,
                            Description = "Produkty spożywcze",
                            IsActive = true,
                            Name = "Żywność"
                        });
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdClient");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            IdClient = 1,
                            Adress = "ul. Główna 1, Warszawa",
                            IsActive = true,
                            Name = "Jan Kowalski",
                            PhoneNumber = "500-100-200"
                        },
                        new
                        {
                            IdClient = 2,
                            Adress = "ul. Kwiatowa 5, Kraków",
                            IsActive = true,
                            Name = "Anna Nowak",
                            PhoneNumber = "600-200-300"
                        });
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Item", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdItem"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int?>("IdUnitOfMeasurement")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("IdItem");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdUnitOfMeasurement");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            IdItem = 1,
                            Code = "LAP001",
                            Description = "Laptop Dell Inspiron 15",
                            IdCategory = 1,
                            IdUnitOfMeasurement = 1,
                            IsActive = true,
                            Name = "Laptop Dell",
                            Price = 3500m,
                            Quantity = 10m
                        },
                        new
                        {
                            IdItem = 2,
                            Code = "MON001",
                            Description = "Monitor 24 cale",
                            IdCategory = 1,
                            IdUnitOfMeasurement = 1,
                            IsActive = true,
                            Name = "Monitor Samsung",
                            Price = 800m,
                            Quantity = 15m
                        });
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrder"));

                    b.Property<DateTime?>("DataOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int");

                    b.Property<int?>("IdWorker")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdOrder");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdWorker");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.OrderItem", b =>
                {
                    b.Property<int>("IdOrderItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrderItem"));

                    b.Property<int>("IdItem")
                        .HasColumnType("int");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("IdOrderItem");

                    b.HasIndex("IdItem");

                    b.HasIndex("IdOrder");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.UnitOfMeasurement", b =>
                {
                    b.Property<int>("IdUnitOfMeasurement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUnitOfMeasurement"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUnitOfMeasurement");

                    b.ToTable("UnitOfMeasurements");

                    b.HasData(
                        new
                        {
                            IdUnitOfMeasurement = 1,
                            Description = "Sztuki",
                            IsActive = true,
                            Name = "szt"
                        },
                        new
                        {
                            IdUnitOfMeasurement = 2,
                            Description = "Kilogramy",
                            IsActive = true,
                            Name = "kg"
                        },
                        new
                        {
                            IdUnitOfMeasurement = 3,
                            Description = "Litry",
                            IsActive = true,
                            Name = "l"
                        });
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Worker", b =>
                {
                    b.Property<int>("IdWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWorker"));

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdWorker");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            IdWorker = 1,
                            FirstName = "Piotr",
                            IsActive = true,
                            LastName = "Kowalczyk",
                            Login = "pkowalczyk",
                            Password = "haslo123"
                        },
                        new
                        {
                            IdWorker = 2,
                            FirstName = "Maria",
                            IsActive = true,
                            LastName = "Wiśniewska",
                            Login = "mwisnieska",
                            Password = "haslo456"
                        });
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Item", b =>
                {
                    b.HasOne("SolutionOrdersReact.Server.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionOrdersReact.Server.Models.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("Items")
                        .HasForeignKey("IdUnitOfMeasurement")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Order", b =>
                {
                    b.HasOne("SolutionOrdersReact.Server.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SolutionOrdersReact.Server.Models.Worker", "Worker")
                        .WithMany("Orders")
                        .HasForeignKey("IdWorker")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.OrderItem", b =>
                {
                    b.HasOne("SolutionOrdersReact.Server.Models.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("IdItem")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionOrdersReact.Server.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Item", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.UnitOfMeasurement", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SolutionOrdersReact.Server.Models.Worker", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
